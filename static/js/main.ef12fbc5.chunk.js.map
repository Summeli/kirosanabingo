{"version":3,"sources":["GameButton.tsx","GameBoard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameButton","props","onClick","this","id","className","isClicked","text","Component","GameBoard","cursewords","state","rcursewords","Array","clickedButtons","isBingo","i","rndPos","Math","floor","random","length","splice","clicks","slice","bingo","setState","handleClick","renderGameButton","clickedButons","React","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAuBiBA,EAdjB,kDAEE,WAAYC,GAAe,uCACnBA,GAHV,0CAMI,WACE,OAAO,wBAAQC,QAAWC,KAAKF,MAAMC,QAASE,GAAMD,KAAKF,MAAMG,GAC7DC,UAAYF,KAAKF,MAAMK,UAAY,oBAAsB,uBADpD,SAELH,KAAKF,MAAMM,WATnB,GAAgCC,aCwFjBC,E,kDAnFb,cAAgB,IAAD,sCACb,cAAM,KAJRC,WAA4B,CAAC,QAAQ,YAAY,UAAU,UAAW,SAAU,QAChF,QAAS,QAAS,WAKhB,EAAKC,MAAQ,CAACC,YAAa,IAAIC,MAAM,GAAIC,eAAgB,IAAID,MAAM,GAAIE,SAAS,GAGhF,IAAI,IAAIC,EAAE,EAAGA,EAAE,EAAGA,IAAI,CACpB,IAAIC,EAAiBC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,EAAKT,WAAWW,SAC3E,EAAKV,MAAMC,YAAYI,GAAK,EAAKN,WAAWO,GAC5C,EAAKP,WAAWY,OAAOL,EAAO,GAC9B,EAAKN,MAAMG,eAAeE,IAAK,EAVpB,S,+CAef,SAAYZ,GACV,IAAImB,EAAyBpB,KAAKQ,MAAMG,eAAeU,QACjDd,EAA4BP,KAAKQ,MAAMC,YAAYY,QACzDD,EAAOnB,IAAOmB,EAAOnB,GACrB,IAAMqB,EAAiBtB,KAAKY,QAAQQ,GACpCpB,KAAKuB,UAAS,SAAAf,GAAK,MAAK,CACtBC,YAAcF,EACdI,eAAiBS,EACjBR,QAAUU,Q,8BAId,SAAiBT,GAAW,IAAD,OACvB,OACI,cAAC,EAAD,CACET,KAAMJ,KAAKQ,MAAMC,YAAYI,GAAIV,UAAWH,KAAKQ,MAAMG,eAAeE,GACtEZ,GAAMY,EACNd,QAAW,kBAAM,EAAKyB,YAAYX,Q,oBAK5C,WACI,OACI,gCACA,sBAAKX,UAAU,YAAf,UACCF,KAAKyB,iBAAiB,GACtBzB,KAAKyB,iBAAiB,GACtBzB,KAAKyB,iBAAiB,MAEzB,sBAAKvB,UAAU,YAAf,UACGF,KAAKyB,iBAAiB,GACtBzB,KAAKyB,iBAAiB,GACtBzB,KAAKyB,iBAAiB,MAEzB,sBAAKvB,UAAU,YAAf,UACGF,KAAKyB,iBAAiB,GACtBzB,KAAKyB,iBAAiB,GACtBzB,KAAKyB,iBAAiB,MAEzB,kCAAKzB,KAAKQ,MAAMI,QAAS,QAAU,W,qBAKzC,SAAQc,GACN,SAAGA,EAAc,IAAMA,EAAc,IAAMA,EAAc,SAEhDA,EAAc,IAAMA,EAAc,IAAMA,EAAc,SAEtDA,EAAc,IAAMA,EAAc,IAAMA,EAAc,SAEtDA,EAAc,IAAMA,EAAc,IAAMA,EAAc,SAEtDA,EAAc,IAAMA,EAAc,IAAMA,EAAc,SAEtDA,EAAc,IAAMA,EAAc,IAAMA,EAAc,SAEtDA,EAAc,IAAMA,EAAc,IAAMA,EAAc,QAEtDA,EAAc,IAAMA,EAAc,IAAMA,EAAc,c,GAhF3CC,IAAMtB,WCIfuB,MATf,WACE,OACE,qBAAK1B,UAAU,gBAAf,SAEE,cAAC,EAAD,OCMS2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ef12fbc5.chunk.js","sourcesContent":["import React, { Component, MouseEvent, useState } from 'react';\r\n\r\ninterface Props {\r\n    text: string;\r\n    isClicked: boolean;\r\n    id: number;\r\n    onClick: (ev: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport class GameButton extends Component<Props> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n  }\r\n    \r\n    render() {\r\n      return <button onClick = {this.props.onClick} id = {this.props.id as unknown as string}\r\n        className= {this.props.isClicked ? \"pressedGameButton\" : \"notPressedGamebutton\"} \r\n      >{this.props.text} \r\n      </button>\r\n    }\r\n  }\r\n\r\n  export default GameButton;","import React, { Component, MouseEvent } from 'react';\r\nimport GameButton from './GameButton';\r\n\r\ninterface BoardState {\r\n  rcursewords: Array<string>;\r\n  clickedButtons: Array<boolean>;\r\n  isBingo: boolean;\r\n}\r\n\r\nclass GameBoard extends React.Component<{},BoardState> {\r\n\r\n  cursewords: Array<string> = [\"Vittu\",\"Jumalauta\",\"Perhana\",\"Saatana\", \"Hitsit\", \"Kulli\",\r\n  \"Hitto\", \"Perse\", \"Perkele\"];\r\n\r\n  constructor({}){\r\n    super({});\r\n\r\n    this.state = {rcursewords: new Array(9), clickedButtons: new Array(9), isBingo: false};\r\n\r\n    //Randomize cursewords into the stateobject\r\n    for(let i=0; i<9; i++){\r\n      let rndPos: number = Math.floor(Math.random() * Math.floor(this.cursewords.length));\r\n      this.state.rcursewords[i] = this.cursewords[rndPos];\r\n      this.cursewords.splice(rndPos,1);\r\n      this.state.clickedButtons[i] = false;\r\n    }\r\n\r\n  }\r\n\r\n  handleClick(id: number) {\r\n    let clicks: Array<boolean> = this.state.clickedButtons.slice();\r\n    const cursewords: Array<string> = this.state.rcursewords.slice();\r\n    clicks[id] = !clicks[id];\r\n    const bingo: boolean = this.isBingo(clicks);\r\n    this.setState(state => ({\r\n      rcursewords : cursewords,\r\n      clickedButtons : clicks,\r\n      isBingo : bingo\r\n    }));\r\n  }\r\n\r\n  renderGameButton(i: number){\r\n      return (\r\n          <GameButton\r\n            text={this.state.rcursewords[i]} isClicked={this.state.clickedButtons[i]} \r\n            id = {i}\r\n            onClick = {() => this.handleClick(i)}\r\n          />\r\n        );\r\n  }\r\n\r\n  render() {\r\n      return(\r\n          <div>\r\n          <div className=\"board-row\">\r\n          {this.renderGameButton(0)}\r\n          {this.renderGameButton(1)}\r\n          {this.renderGameButton(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderGameButton(3)}\r\n          {this.renderGameButton(4)}\r\n          {this.renderGameButton(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderGameButton(6)}\r\n          {this.renderGameButton(7)}\r\n          {this.renderGameButton(8)}\r\n        </div>\r\n        <p> {this.state.isBingo? \"BINGO\" : \"\"}</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  isBingo(clickedButons: Array<boolean>): boolean {\r\n    if(clickedButons[0] && clickedButons[1] && clickedButons[2]){\r\n      return true;\r\n    }else if(clickedButons[3] && clickedButons[4] && clickedButons[5]){\r\n      return true;\r\n    }else if(clickedButons[6] && clickedButons[7] && clickedButons[8]){\r\n      return true;\r\n    }else if(clickedButons[0] && clickedButons[3] && clickedButons[6]){\r\n      return true;\r\n    }else if(clickedButons[1] && clickedButons[4] && clickedButons[7]){\r\n      return true;\r\n    }else if(clickedButons[2] && clickedButons[5] && clickedButons[8]){\r\n      return true;\r\n    }else if(clickedButons[0] && clickedButons[4] && clickedButons[8]){\r\n      return true;\r\n    }else if(clickedButons[2] && clickedButons[4] && clickedButons[6]){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\nexport default GameBoard;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport GameBoard from './GameBoard';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"Kirosanabingo\">\r\n       \r\n      <GameBoard />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}